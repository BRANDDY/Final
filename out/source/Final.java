/* autogenerated by Processing revision 1276 on 2021-12-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Final extends PApplet {

/*Creat Color Score
Different color has different pitch.
->PITCH:Click pitch buttons(colour).
->ADD a note:Drag a button to paper on left side.
->DELETED: Drag the note to right side.
->OCTAVE:Press the note, use mouse wheel increase or decrease octave(8 pitches)
When you finish composing the score, 
click the White Button to PLAY your music.
You can compose them any way you want at any time.
***The music will be played line by line.***
*/


TriOsc triOsc;
Buttons[] buttonList;
Buttons note;
ArrayList<Buttons> noteList;
boolean start = false;

PVector buttonSize = new PVector(50,60);


 public void setup() {
    triOsc = new TriOsc(this);
    buttonList = new Buttons[8];
    /* size commented out by preprocessor */;
    setButton();
    noteList = new ArrayList<Buttons>();
}

 public void draw() {
    background(0);
    startUi(); 
}
PVector colours;
int red, green,blue;

 public void startUi() {
    fill(255);
    rect(20, 20, 475, 320, 28);
    int y1 = 20;
    for (int i = 0;i < 5;i++) {
        y1 += 53;
        line(20,y1,490,y1);
    }    
    for (int i = 0;i < 8;i++) {
        buttonList[i].update();
    }
    for (int i = 0;i < noteList.size();i++) {
        noteList.get(i).update();
    }
    line(522,33,552,57);
    line(552,57,522,83);
    line(522,33,522,83);
}

 public void setButton() {
    PVector loc = new PVector(510,30);
    for (int i = 0;i < 2;i++) {
        for (int t = 0;t < 4;t++) {
            int scale = 60 + 2 * (t + i * 4) - 1;
            if ((t + i * 4)>= 4) {
                scale = scale - 1;
            }
            buttonList[t + i * 4] = new Buttons(t + i * 4,scale,1,loc);
            loc.y = loc.y + 60 + 20;
        }
        loc.x += 70;     
        loc.y = 30;   
    } 
}



class Buttons{
    PVector bLoc;
    int scale, pitch;
    PVector colour,colourOrg;
    
    Buttons(int i,int s, int p,PVector l) {
        bLoc = new PVector(l.x,l.y);
        scale = s;
        pitch = p;
        setColour(i);
        colourOrg = new PVector(red,green,blue);
    }
    Buttons() {
        bLoc = new PVector();
    }
    
     public void update() {
        fill(colour.x,colour.y,colour.z);
        rect(bLoc.x, bLoc.y, buttonSize.x, buttonSize.y, 28);
    }

     public void setColour(int t) {
        switch(t) {
            case 0 : red = 255;green = 255;blue = 255; break;
            case 1 : red = 255 ;green = 50;blue = 50; break;
            case 2 : red = 255 ;green = 100;blue = 50; break;
            case 3 : red = 255 ;green = 255 ;blue = 50; break;
            case 4 : red = 50;green = 255 ;blue = 50; break;
            case 5 : red = 0;green = 255;blue = 200; break;
            case 6 : red = 50;green = 150;blue = 255; break;
            case 7 : red = 150;green = 50;blue = 255; break;
        }
        colour = new PVector(red,green,blue);
    }
}
 public float midiToFreq(int n, int p) {
    return(pow(2,((n - 69) / 12.0f))) * 440  * p;
}
boolean play = false;
boolean move = false;
boolean addNote = false;
boolean playButton = false;

 public void mouseWheel(MouseEvent event) {
    if (mousePressed) {
        println("goin");
        for (int i = 0;i < noteList.size();i++) {
            if (mouseX > noteList.get(i).bLoc.x && mouseX < noteList.get(i).bLoc.x + buttonSize.x 
                && mouseY > noteList.get(i).bLoc.y && mouseY < noteList.get(i).bLoc.y + buttonSize.y) {
                float e = event.getCount();
                noteList.get(i).pitch += e;
                float c = noteList.get(i).pitch * 20;
                if (noteList.get(i).pitch<6 &&  noteList.get(i).pitch>0) {
                    noteList.get(i).colour=new PVector(noteList.get(i).colourOrg.x - c, noteList.get(i).colourOrg.y - c, noteList.get(i).colourOrg.z - c);
                } else{
                    noteList.get(i).pitch = 0;
                    noteList.get(i).colour=new PVector(255, 255, 255);
                }
                println("Pitch Level:" + noteList.get(i).pitch);
            }  
        }
    }
}

 public void mousePressed() {  
    addNote = false; 
    move = false;  
    playButton = false;  
    if (mouseX > 480) { //right panel
        for (int i = 0;i < 8;i++) { 
            if (mouseX > buttonList[i].bLoc.x && mouseX < buttonList[i].bLoc.x + buttonSize.x 
                && mouseY > buttonList[i].bLoc.y && mouseY < buttonList[i].bLoc.y + buttonSize.y) {
                if (i!= 0) {
                    addNote = true;
                    move = true;
                    note = new Buttons();
                    cloneMember(note, buttonList[i]);
                    play = true;
                } else{//the first button is PLAY Music
                    playButton = true;
                }
            }            
        } 
    } else{//left
        for (int i = 0;i < noteList.size();i++) {
            if (mouseX > noteList.get(i).bLoc.x && mouseX < noteList.get(i).bLoc.x + buttonSize.x 
                && mouseY > noteList.get(i).bLoc.y && mouseY < noteList.get(i).bLoc.y + buttonSize.y) {
                move = true;
                note = noteList.get(i);
                play = true;
            }  
        }
    }   
}

 public void mouseReleased() {
    if (!play) {
        triOsc.stop();
    } else{
        triOsc.play(midiToFreq(note.scale,note.pitch), 0.8f);
    }
    if (move) {
        if (addNote) {
            if (mouseX < 480) {
                noteList.add(note);
            }
        } else{
            if (mouseX > 480) {
                noteList.remove(note);
                play = false;
            } 
        }
    }
    if (playButton) {
        playMusic();
        triOsc.stop();
    }
    note.update();
}

 public void cloneMember(Buttons a, Buttons b) {
    a.bLoc.x = b.bLoc.x;
    a.bLoc.y = b.bLoc.y;
    a.scale = b.scale;
    a.pitch = b.pitch;
    a.colourOrg = new PVector(b.colourOrg.x, b.colourOrg.y,b.colourOrg.z);
    a.colour = new PVector(b.colour.x, b.colour.y,b.colour.z);
    println(a.colour.x);
}

 public void mouseDragged() {
    if (move) {
        note.bLoc.x = mouseX;
        note.bLoc.y = mouseY;
        note.update();
    }
}



ArrayList<ArrayList<Buttons>> rowList = new ArrayList<ArrayList<Buttons>>();
ArrayList<Buttons> music = new ArrayList<Buttons>();
int trigger = 0;

 public void playMusic() {
    organize();
    if (music.size()>0) {
        for (int i = 0;i < music.size() + 1;i++) {
            trigger = millis() + 300;
            while(millis() < trigger) {
                if (keyCode ==  UP) {
                    break;
                }
            }
            if (i!= (music.size())) {
                triOsc.play(midiToFreq(music.get(i).scale,music.get(i).pitch), 0.8f);
            }   
        }
    } else{
        println("NullMusic");
    }
    music.clear();
    rowList.clear();
}

 public void organize() {
    orgRow(); 
    for (int n = 0;n < 6;n++) {
        while(rowList.get(n).size()> 0) {
            for (int i = 0;i < rowList.get(n).size();i++) {
                boolean small = true;
                for (int t = 0;t < rowList.get(n).size();t++) {
                    if (i!= t &&  rowList.get(n).get(i).bLoc.x>rowList.get(n).get(t).bLoc.x) {
                        small = false;
                    }
                }
                if (small) {
                    music.add(rowList.get(n).get(i));
                    rowList.get(n).remove(i);
                }
            }
        }
    }
}

 public void orgRow() {
    int row;
    ArrayList<Buttons> row0 = new ArrayList<Buttons>();
    ArrayList<Buttons> row1 = new ArrayList<Buttons>();
    ArrayList<Buttons> row2 = new ArrayList<Buttons>();
    ArrayList<Buttons> row3 = new ArrayList<Buttons>();
    ArrayList<Buttons> row4 = new ArrayList<Buttons>();
    ArrayList<Buttons> row5 = new ArrayList<Buttons>();
    for (int i = 0;i < noteList.size();i++) {
        float y = noteList.get(i).bLoc.y;
        if (y > 10 &&  y < 60) {
            row0.add(noteList.get(i));
        } 
        else if (y >= 60 &&  y < 110) {
            row1.add(noteList.get(i));
        }
        else if (y >= 110 &&  y < 160) {
            row2.add(noteList.get(i));
        }
        else if (y >= 160 &&  y < 210) {
            row3.add(noteList.get(i));
        }
        else if (y >= 210 &&  y < 260) {
            row4.add(noteList.get(i));
        }
        else if (y >= 260 &&  y < 300) {
            row5.add(noteList.get(i));
        } else{
            println(i + "wrong row" + y);
            break;
        }    
    } 
    rowList.add(row0);  
    rowList.add(row1);  
    rowList.add(row2);  
    rowList.add(row3);  
    rowList.add(row4);  
    rowList.add(row5);  
}


  public void settings() { size(640, 360, P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Final" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
